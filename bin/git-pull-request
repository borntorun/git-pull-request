#!/bin/bash

set -e

ACCESS_TOKEN=$(cat ~/.git-pull-request)

if [[ -z $ACCESS_TOKEN ]]; then
  echo "Create an access token for your GitHub user at"
  echo "  https://github.com/settings/applications"
  echo "and put it in the ~/.git-pull-request file"
  exit 1
fi

usage() {
cat << EOF
usage: git pull-request [options]
   or: git pull-request -t <title> [options]
   or: git pull-request -i <issue> [options]

Create a Pull Request (PR) in GitHub.

OPTIONS:
   -h <branch>         Branch you want to PR. It has to exist in the remote. (Default: current branch)
   -r <repo>           Repo where to PR. (Default: current repo name)
   -o <owner>          Owner of the repo. (Default: parsed from your remote's URL)
   -b <base>           Branch where you want your PR merged into. (Default: master)
   -t <title>          Title of the PR. (Default: the last commit's title, as long as there is only one commit in the PR.)
   -d <description>    Description of the PR.
   -i <issue>          Number of the issue related.
                       WARNING: This will convert the issue into a PR and override <title> and <description>
   -e                  Opens your EDITOR in a temporary file to write the description.
   -c                  Copy the PR URL to the clipboard.
   -f                  Fake run, doesn't make the request but prints the URL and body.

EOF
}

HEAD=$(git symbolic-ref --short HEAD)
BASE=master

OWNER_URL=$(git remote -v | awk '/https:..github.com.* .push.$/ { sub(/^https:\/\/github.com\//, "", $2); print $2 }' | head -1)
CONTRIBUTOR_URL=$(git remote -v | awk '/git@github.com.* .push.$/ { sub(/^git@github.com:/, "", $2); print $2 }' | head -1)

if [[ -z $OWNER_URL ]]; then
  OWNER_URL=$CONTRIBUTOR_URL
fi

OWNER=$(cut -d/ -f1 <<< $OWNER_URL)
REPO=$(cut -d/ -f2 <<< $OWNER_URL | sed -e 's/\.git$//')

CONTRIBUTOR=$(cut -d/ -f1 <<< $CONTRIBUTOR_URL)

while getopts “h:r:b:t:d:i:o:ecfw” OPTION
do
  case $OPTION in
    h)
      HEAD=$OPTARG;;
    r)
      REPO=$OPTARG;;
    o)
      OWNER=$OPTARG;;
    b)
      BASE=$OPTARG;;
    t)
      TITLE=$OPTARG;;
    d)
      DESCRIPTION=$OPTARG;;
    i)
      ISSUE=$OPTARG;;
    e)
      EDIT=true;;
    c)
      CLIPBOARD=true;;
    f)
      FAKE=true;;
    w)
      WIP=true;;
    ?)
      usage
      exit;;
  esac
done

if [[ -z $TITLE ]] && [[ -z $ISSUE ]]; then
  COUNT=$(git log --oneline $BASE..HEAD | wc -l)

  if [[ $COUNT -eq 1 ]]; then
    TITLE=$(git log -1 --pretty=%s)
  else
    cat <<-EOS >&2
Refusing to choose a PR title for you since there are many commits to choose from.
Please specify -t yourself.
EOS

    exit 1
  fi
fi

if [[ $OWNER != $CONTRIBUTOR ]]; then
  HEAD=$CONTRIBUTOR:$HEAD
fi

BODY=("\"head\": \"$HEAD\"" "\"base\": \"$BASE\"")

if [[ -n $ISSUE ]]; then
  BODY+=("\"issue\": \"$ISSUE\"")
  if [[ -n $WIP ]] ; then
    ISSUE_URL="https://api.github.com/repos/$OWNER/$REPO/issues/$ISSUE/labels"
    ISSUE_BODY="[\"wip\"]"

    if [[ -n $FAKE ]]; then
      echo "Fake run, not setting any labels"
      echo "  $ISSUE_URL"
      echo "  $ISSUE_BODY"
    else
      curl -s -H "Authorization: token $ACCESS_TOKEN" -H "Content-Type: application/json" -d "$ISSUE_BODY" $ISSUE_URL
    fi
  fi
else
  BODY+=("\"title\": \"$TITLE\"")

  if [[ -n $DESCRIPTION ]]; then
    BODY+=("\"body\": \"$DESCRIPTION\"")
  elif [[ $EDIT ]]; then
    DESCRIPTION_FILE="/tmp/git-pull-request-description"
    $EDITOR $DESCRIPTION_FILE
    DESCRIPTION=$(cat $DESCRIPTION_FILE)
    rm $DESCRIPTION_FILE

    BODY+=("\"body\": \"$DESCRIPTION\"")
  fi
fi

SAVE_IFS=$IFS
IFS=","
BODY="{${BODY[*]}}"
IFS=$SAVE_IFS

PR_URL="https://api.github.com/repos/$OWNER/$REPO/pulls"

if [[ $FAKE ]]; then
  echo "Fake run, not making the request"
  echo "  $PR_URL"
  echo "  $BODY"
  exit
else
  RESPONSE=$(curl -s -H "Authorization: token $ACCESS_TOKEN" -H "Content-Type: application/json" -d "$BODY" $PR_URL)
fi

URL=$(echo $RESPONSE | grep -Eo "\"html_url\": \"(.*?\/pull\/\\d+)\"," | sed -E "s/.*\"(https.*)\",/\\1/")
if [[ -n $URL ]]; then
  echo $URL
else
  echo $RESPONSE
fi

if [[ $CLIPBOARD ]]; then
  if [[ $(type pbcopy) == *"not found"* ]]; then
    CLIP_COMMAND="xclip -selection clipboard"
  else
    CLIP_COMMAND="pbcopy"
  fi

  echo $URL | $CLIP_COMMAND
fi
